
import React from 'react';
import { Terminal } from "@/components/Terminal";
import { Rocket } from 'lucide-react';

interface GuideSimulationStepProps {
  simulationOutputLines: string[];
  isSimulating: boolean;
  isExploitConfigurationCorrect: () => boolean;
  simulationStepsLength: number;
  incorrectSimulationStepsLength: number;
}

const GuideSimulationStep: React.FC<GuideSimulationStepProps> = ({
  simulationOutputLines,
  isSimulating,
  isExploitConfigurationCorrect,
  simulationStepsLength,
  incorrectSimulationStepsLength,
}) => {
  return (
    <div className="col-span-2 space-y-4">
      <h4 className="text-lg font-medium text-yellow-400 text-center flex items-center justify-center gap-2">
        <Rocket size={20}/>Step 6Ô∏è‚É£: Simulate Sending the Payload
      </h4>
      <p className="text-slate-300 text-center mb-3">üñ•Ô∏è Virtual terminal simulation:</p>
      <Terminal className="max-h-[300px] overflow-y-auto bg-slate-950 p-2 rounded-md min-h-[200px]">
        {simulationOutputLines.map((line, index) => {
          let textClass = 'text-slate-300';
          if (typeof line === 'string') {
            if (line.startsWith("‚úÖ")) textClass = "text-green-300";
            else if (line.startsWith("[!]")) textClass = "text-red-400";
            else if (line.startsWith("[*]")) textClass = "text-yellow-300";
            else if (line.startsWith("[‚ö†Ô∏è]")) textClass = "text-orange-400";
            return <p key={index} className={`${textClass} font-mono text-xs`}>{line}</p>;
          }
          // Log if line is not a string, but don't render an error message in the terminal
          console.warn(`[ExploitBuilderGuideView/SimulationStep] Simulation line at index ${index} is not a string:`, line);
          return null; 
        })}
        {isSimulating && simulationOutputLines.length < (isExploitConfigurationCorrect() ? simulationStepsLength : incorrectSimulationStepsLength) && (
          <p className="animate-pulse text-sky-300 font-mono text-xs">Simulating...</p>
        )}
      </Terminal>
      {!isSimulating && simulationOutputLines.length > 0 && simulationOutputLines.some(line => typeof line === 'string' && line.startsWith("‚úÖ")) && (
          <p className="text-center text-lg text-green-300 mt-4 font-bold animate-fade-in">
          Exploit Successful! Flag Retrieved! üéâ
          </p>
      )}
      {!isSimulating && simulationOutputLines.length > 0 && simulationOutputLines.some(line => typeof line === 'string' && line.startsWith("[!]")) && (
          <p className="text-center text-lg text-red-400 mt-4 font-bold animate-fade-in">
          Exploit Failed. Please review your selections.
          </p>
      )}
    </div>
  );
};

export default GuideSimulationStep;
