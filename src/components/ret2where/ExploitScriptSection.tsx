
import { Button } from "@/components/ui/button";
import { Terminal, ArrowLeft, Play } from "lucide-react"; // Changed icons

interface ExploitScriptSectionProps {
  exploitScript: string;
  onNextPhase: () => void;
  onBack: () => void;
}

const ExploitScriptSection = ({ exploitScript, onNextPhase, onBack }: ExploitScriptSectionProps) => {
  const commonButtonClass = "text-slate-100 border-sky-500 hover:bg-sky-700/50 hover:text-white";
  const successButtonClass = "bg-green-600 hover:bg-green-500 text-white";
  
  return (
    <div className="p-4 md:p-8 animate-fade-in">
      <div className="flex items-center justify-center gap-2 mb-6">
        <Terminal className="h-10 w-10 text-sky-400" /> {/* Changed icon */}
        <h2 className="text-2xl md:text-3xl font-semibold text-sky-300">
          Final Exploit Script
        </h2>
      </div>
      <div className="bg-slate-950 border border-slate-700 rounded-lg p-4 max-w-2xl mx-auto">
        <pre className="text-green-300 font-mono text-sm overflow-x-auto whitespace-pre-wrap">
          {exploitScript ? exploitScript.trim() : "Generating script..."}
        </pre>
      </div>
      <p className="text-sm text-slate-400 mt-4 text-center max-w-2xl mx-auto">
        This Python script uses <code className="text-yellow-400">pwntools</code> to send the crafted ROP chain payload to the vulnerable application. Review it carefully before simulating.
      </p>
      <div className="mt-8 flex justify-center space-x-4">
        <Button onClick={onBack} variant="outline" className={commonButtonClass}>
          <ArrowLeft className="mr-1"/>Back to Script Builder {/* Changed icon */}
        </Button>
        <Button onClick={onNextPhase} className={successButtonClass}>
          Simulate Payload Execution <Play className="ml-2" /> {/* Changed icon */}
        </Button>
      </div>
    </div>
  );
};
export default ExploitScriptSection;
